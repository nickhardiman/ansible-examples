---
# ipaddr filter
# https://docs.ansible.com/ansible/2.4/playbooks_filters_ipaddr.html
# ipaddr()
# ipv4()
# ipv6()
# ipaddr('address')
# ipaddr('network')
# ipaddr('netmask') 
# ipaddr('broadcast') 
# etc. 
#
# run
# ansible-playbook -i inventory-localhost.yml filter-ipaddr.yml 
#
- name: ipaddr filter
  hosts: localhost 
  gather_facts: no
  become: no
  #delegate_to: localhost
  connection: local
  # vars - '523454/24' is 0.7.252.190/24
  vars:
  - valid:
    - '192.168.0.1'
    - '192.168.32.0/24'
    - 'fe80::100/10'
    - 45443646733
    - '523454/24'
  - invalid:
    - 'localhost'
    - True
    - 'space bar'
    - False
    - ''
    - ':'
    - 'fe80:/10'
  - string_containing_only_one_IPv4_address: "192.168.0.1"
  - string_containing_one_IPv4_address_and_stuff: "192.168.0.1 bla"
  - string_containing_many_IPv4_addresses: "192.168.0.1,1.2.3.4,0.7.252.190/24"
  tasks:

  # tests with a string containing valid IP addresses 

  - name: "The ipaddr filter can work with a string if it only contains one IP address."
    debug:
      msg: "can ipaddr read string_containing_only_one_IPv4_address? {{ string_containing_only_one_IPv4_address | ipaddr }}"
        
  - name: "This is too confusing for ipaddr"
    debug:
      msg: "can ipaddr read string_containing_one_IPv4_address_and_stuff? {{ string_containing_one_IPv4_address_and_stuff | ipaddr }}"
        
  - name: "The ipaddr filter can't find IP addresses in a complicated string"
    debug:
      msg: "can ipaddr read string_containing_many_IPv4_addresses? {{ string_containing_many_IPv4_addresses | ipaddr }}"
        
  - name: Adding python's split fixes this example.
    debug:
      msg: "can ipaddr read string_containing_many_IPv4_addresses? {{ string_containing_many_IPv4_addresses.split(',') | ipaddr }}"
        
  # tests with a list of valid IP addresses 

  - name: the whole IP address list at once
    debug:
      msg: "Which ones are IP addresses? {{ valid | ipaddr }}"
        
  - name: IP address
    debug:
      msg: "{{ item }} is an IP address? {{ item | ipaddr }}"
    loop: "{{ valid }}"
        
  - name: IPv4
    debug:
      msg: "{{ item }} is IPv4? {{ item | ipv4 }}"
    loop: "{{ valid }}"
        
  - name: the whole IP address list at once. This list contains only the valid IPv4 addresses.
    debug:
      msg: "Which ones are IPv4 addresses? {{ valid | ipv4 }}"
        
  - name: IPv6
    debug:
      msg: "{{ item }} is IPv6? {{ item | ipv6 }}"
    loop: "{{ valid }}"
        
  # tests with a list of invalid IP addresses 

  - name: IP address
    debug:
      msg: "{{ item }} is an IP address? {{ item | ipaddr }}"
    loop: "{{ invalid }}"
        
  - name: "keywords (I thought keywords were barewords): host/prefix, address, network, netmask and broadcast"
    vars: 
      ipv4_host: '1.2.3.4/8'
    debug: 
      msg: "{{ ipv4_host }} translates to host/prefix: {{ ipv4_host | ipaddr('host/prefix') }}, address: {{ ipv4_host | ipaddr('address') }}, network: {{ ipv4_host | ipaddr('network') }}, netmask: {{ ipv4_host | ipaddr('netmask') }}, broadcast: {{ ipv4_host | ipaddr('broadcast') }}"

  - name: "more keywords: prefix, net"
    vars: 
      ipv4_host: '1.2.3.4/8'
    debug: 
      msg: "{{ ipv4_host }} translates to prefix: {{ ipv4_host | ipaddr('prefix') }}, net: {{ ipv4_host | ipaddr('net') }}"

  - name: "conversions from octets (dotted quads) to decimal, from IPv4 to IPv6"
    vars: 
      ipv4_addr: '1.2.3.4'
    debug: 
      msg: "{{ ipv4_addr }} translates to int: {{ ipv4_addr | ipaddr('int') }}, 6to4: {{ ipv4_addr | ipaddr('6to4') }}"

