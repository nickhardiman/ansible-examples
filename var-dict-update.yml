---
# change a dictionary
# run 
#   ansible-playbook var-dict-update.yml 
#  
# https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#dictionary-variables
# Updating a value in a dictionary is difficult because 
# a dictionary entry can't really be changed. 
# These examples create a new copy with changes. 
#
#

- name: change a dictionary
  hosts: localhost 
  gather_facts: no
  become: no
  connection: local
  # define the dictionary variable
  vars:
    dict_original: 
      a_key: a value
      another_key: another value
      and_another_key: and another value
      'key with spaces': some value

  tasks:

  - name: gotcha! this assignment fails
    set_fact:
      dict_original['a_key']: 'a new value'
    ignore_errors: yes

  - name: an exact copy, no changes
    set_fact:
      dict_copy: "{{ dict_original }}"
  - debug:
      var: dict_copy

  - name: delete entry 'another_key'
    set_fact:
      dict_minus_an_entry: "{{ dict_minus_an_entry | default({}) | combine( {item.key: item.value} ) }}"
    loop: "{{ dict_original | dict2items }}"
    when: item.key != 'another_key'
  - debug:
      var: dict_minus_an_entry

  - name: change entry 'another_key'
    set_fact:
      dict_with_changed_entry: "{{ dict_original | combine({'another_key': 'NEW VALUE'}) }}"
  - debug:
      var: dict_with_changed_entry

  - name: same thing, locally scoped (the dictionary is not available to other tasks)
    vars:
      dict_locally_scoped: "{{ dict_original | combine({'another_key': 'NEW VALUE'}) }}"
    debug:
      var: dict_locally_scoped

  - name: replace the original dictionary
    set_fact: 
      dict_original: "{{ dict_with_changed_entry }}"
  - debug:
      var: dict_original
      
